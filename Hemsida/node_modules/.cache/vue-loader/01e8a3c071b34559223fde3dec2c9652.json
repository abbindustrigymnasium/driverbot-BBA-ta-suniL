{"remainingRequest":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\src\\components\\Buttons.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\src\\components\\Buttons.vue","mtime":1590999709848},{"path":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n//Bibliotek som ska användas\r\nvar mqtt = require(\"mqtt\");\r\nexport default {\r\n  name: \"Buttons\",\r\n  props: {\r\n//Data som skickas in i komponenten\r\n  },\r\n  data() {\r\n//Data som används i komponenten\r\n    return {\r\n      connected: false,\r\n      clientId: \"notyetAssigned\",\r\n      client: null,\r\n      speed: 600,\r\n      options: {},\r\n    };\r\n  },\r\n  computed: {\r\n    Disconnect() {\r\n      if (this.$store.getters.connected == false) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  },\r\n  watch: {\r\n    //Om du vill logga någonting när det förändras i htmldelen. se exempel nedan\r\n    Disconnect: {\r\n      handler: function(newVal) {\r\n        if (newVal == true) {\r\n          this.connected = false;\r\n          this.client = mqtt.disconnect;\r\n          this.car = \"green\";\r\n        }\r\n      }\r\n    }\r\n  },\r\n   created() {\r\n  //När komponenten är skapad\r\n    this.Connect()\r\n  },\r\n  methods: {\r\n\r\n//Hallå\r\n    Connect() {\r\n      //https://github.com/mqttjs/MQTT.js/blob/master/README.md\r\n      var ref = this;\r\n      if (this.connected == true) {\r\n        return \"\";\r\n      }\r\n      let User = this.$store.getters.GetUser;\r\n      this.clientId =\r\n        \"DriverControll\" +\r\n        Math.random()\r\n          .toString(16)\r\n          .substr(2, 8);\r\n      var mqtt_url = User.adress;\r\n      var url = \"mqtt://\" + mqtt_url;\r\n      var options = {\r\n        port: User.port,\r\n        topic: User.topic,\r\n        clientId: this.clientId,\r\n        username: User.name,\r\n        password: User.password\r\n      };\r\n      this.options = options;\r\n      // console.log(\"connecting\");\r\n      this.client = mqtt.connect(url, options);\r\n      // console.log(\"connected?\");\r\n\r\n      this.client\r\n        .on(\"connect\", function() {\r\n          // console.log(\"success\");\r\n          ref.Connecting(true);\r\n        })\r\n        .on(\"error\", function() {\r\n          // console.log(\"error\");\r\n          ref.Connecting(false);\r\n        })\r\n        .on(\"close\", function() {\r\n          ref.Connecting(false);\r\n          // console.log(\"closing\");\r\n        });\r\n    },\r\n\r\n//Funktion som ändrar färg på bil-knappen. Röd om man inte är ansluten, annars blå.\r\n    Connecting(connected) {\r\n      this.connected = connected;\r\n      this.$store.dispatch(\"Connect\", connected);\r\n      if (connected == false) {\r\n        this.car = \"red\";\r\n      } else {\r\n        this.car = \"blue\";\r\n        //this.Send(\"drive\", this.clientId + \" har anslutits.\");\r\n      }\r\n    },\r\n\r\n//Funktion som skickar iväg meddelandet (styr-/körvärden) till MQTT, samt lägger skickar till loggern.\r\n    Send(message) {\r\n      this.client.publish(\r\n        this.options.username + \"/\" + this.options.topic,\r\n        message\r\n      );\r\n      this.$store.dispatch(\"addToLogger\", message);\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["Buttons.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Buttons.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n<!-- Ett card som innehåller 2 st sliders. -->\r\n  <v-container>\r\n    <v-card \r\n    width=\"700\" \r\n    height=\"350\"\r\n    flat color=\"white\"\r\n    class=\"mx-auto\">\r\n  <!-- Den första slidern, kontrollerar hastighet. -->\r\n  <!-- Går från -50 till 50, i steg om 10. Värdet som väljs skickas till MQTT-brokern -->\r\n  <v-container fluid>\r\n    <v-row>\r\n      <v-col cols=\"12\">\r\n        <v-subheader class=\"pl-0\">Speed</v-subheader>\r\n        <v-slider\r\n          min=\"-50\"\r\n          max=\"50\"\r\n          v-model=\"hastighet\"  \r\n          thumb-label\r\n          step=\"10\"\r\n          @change=\"Send('h' + hastighet)\"                    \r\n        ></v-slider>\r\n      </v-col>\r\n    </v-row>\r\n  </v-container>\r\n  <!-- Den andra slidern, kontrollerar styrning. -->\r\n  <!-- Går från -90 till 90, i steg om 30. Värdet som väljs skickas till MQTT-brokern -->\r\n  <v-container fluid>\r\n    <v-row>\r\n      <v-col cols=\"12\">\r\n        <v-subheader class=\"pl-0\">Steering</v-subheader>\r\n        <v-slider\r\n          min=\"-90\"\r\n          max=\"90\"\r\n          step=\"30\"\r\n          v-model=\"styrning\"\r\n          thumb-label\r\n          v-on:change=\"Send('s' + styrning)\"\r\n        ></v-slider>\r\n      </v-col>\r\n    </v-row> \r\n  </v-container>\r\n  </v-card>\r\n  </v-container>\r\n</template>\r\n\r\n\r\n<script>\r\n//Bibliotek som ska användas\r\nvar mqtt = require(\"mqtt\");\r\nexport default {\r\n  name: \"Buttons\",\r\n  props: {\r\n//Data som skickas in i komponenten\r\n  },\r\n  data() {\r\n//Data som används i komponenten\r\n    return {\r\n      connected: false,\r\n      clientId: \"notyetAssigned\",\r\n      client: null,\r\n      speed: 600,\r\n      options: {},\r\n    };\r\n  },\r\n  computed: {\r\n    Disconnect() {\r\n      if (this.$store.getters.connected == false) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  },\r\n  watch: {\r\n    //Om du vill logga någonting när det förändras i htmldelen. se exempel nedan\r\n    Disconnect: {\r\n      handler: function(newVal) {\r\n        if (newVal == true) {\r\n          this.connected = false;\r\n          this.client = mqtt.disconnect;\r\n          this.car = \"green\";\r\n        }\r\n      }\r\n    }\r\n  },\r\n   created() {\r\n  //När komponenten är skapad\r\n    this.Connect()\r\n  },\r\n  methods: {\r\n\r\n//Hallå\r\n    Connect() {\r\n      //https://github.com/mqttjs/MQTT.js/blob/master/README.md\r\n      var ref = this;\r\n      if (this.connected == true) {\r\n        return \"\";\r\n      }\r\n      let User = this.$store.getters.GetUser;\r\n      this.clientId =\r\n        \"DriverControll\" +\r\n        Math.random()\r\n          .toString(16)\r\n          .substr(2, 8);\r\n      var mqtt_url = User.adress;\r\n      var url = \"mqtt://\" + mqtt_url;\r\n      var options = {\r\n        port: User.port,\r\n        topic: User.topic,\r\n        clientId: this.clientId,\r\n        username: User.name,\r\n        password: User.password\r\n      };\r\n      this.options = options;\r\n      // console.log(\"connecting\");\r\n      this.client = mqtt.connect(url, options);\r\n      // console.log(\"connected?\");\r\n\r\n      this.client\r\n        .on(\"connect\", function() {\r\n          // console.log(\"success\");\r\n          ref.Connecting(true);\r\n        })\r\n        .on(\"error\", function() {\r\n          // console.log(\"error\");\r\n          ref.Connecting(false);\r\n        })\r\n        .on(\"close\", function() {\r\n          ref.Connecting(false);\r\n          // console.log(\"closing\");\r\n        });\r\n    },\r\n\r\n//Funktion som ändrar färg på bil-knappen. Röd om man inte är ansluten, annars blå.\r\n    Connecting(connected) {\r\n      this.connected = connected;\r\n      this.$store.dispatch(\"Connect\", connected);\r\n      if (connected == false) {\r\n        this.car = \"red\";\r\n      } else {\r\n        this.car = \"blue\";\r\n        //this.Send(\"drive\", this.clientId + \" har anslutits.\");\r\n      }\r\n    },\r\n\r\n//Funktion som skickar iväg meddelandet (styr-/körvärden) till MQTT, samt lägger skickar till loggern.\r\n    Send(message) {\r\n      this.client.publish(\r\n        this.options.username + \"/\" + this.options.topic,\r\n        message\r\n      );\r\n      this.$store.dispatch(\"addToLogger\", message);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<!-- En massa CSS. Bestämmer hur hemsidan ska se ut; layout, färg etc. -->\r\n\r\n<style scoped>\r\n.big {\r\n  font-size: 25px;\r\n}\r\n#Cooltext {\r\n  color: black;\r\n  text-decoration: underline;\r\n}\r\n#box {\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n#hide{\r\n display: none;\r\n}\r\n#logger {\r\n  position: fixed;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 300px;\r\n  height: 300px;\r\n  border: black dotted 2px;\r\n\r\n  word-wrap: break-word;\r\n}\r\n</style>\r\n"]}]}