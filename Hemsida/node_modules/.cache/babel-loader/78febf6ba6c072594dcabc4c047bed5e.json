{"remainingRequest":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\vuetify-loader\\lib\\loader.js!C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\src\\components\\Buttons.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\src\\components\\Buttons.vue","mtime":1585662091095},{"path":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\S9LINOLO\\OneDrive - ABB Industrigymnasium\\Teknik\\Driverbot\\driverbot-BBA-ta-suniL\\Hemsida\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//Bibliotek som ska användas\nvar mqtt = require(\"mqtt\");\n\nexport default {\n  name: \"Buttons\",\n  props: {//Data som skickas in i komponenten\n  },\n  data: function data() {\n    //All data som ska finnas i komponenten\n    return {\n      connected: false,\n      car: \"green\",\n      clientId: \"notyetAssigned\",\n      client: null,\n      speed: 600,\n      ticklabels: [\"Långsamt\", \"Snabbare\", \"Snabbast\"],\n      options: {} //speedvalue: \"slider\",\n      //dirvalue: \"slider2\",\n\n    };\n  },\n  computed: {\n    Disconnect: function Disconnect() {\n      if (this.$store.getters.connected == false) {\n        return true;\n      }\n\n      return false;\n    }\n  },\n  watch: {\n    //Om du vill logga någonting när det förändras i htmldelen. se exempel nedan\n    Disconnect: {\n      handler: function handler(newVal) {\n        if (newVal == true) {\n          this.connected = false;\n          this.client = mqtt.disconnect;\n          this.car = \"green\";\n        }\n      }\n    }\n  },\n  created: function created() {\n    //När komponenten är skapad\n    this.Connect();\n  },\n  methods: {\n    //Metoder\n    Connect: function Connect() {\n      //https://github.com/mqttjs/MQTT.js/blob/master/README.md\n      var ref = this;\n\n      if (this.connected == true) {\n        return \"\";\n      }\n\n      var User = this.$store.getters.GetUser;\n      this.clientId = \"DriverControll\" + Math.random().toString(16).substr(2, 8);\n      var mqtt_url = User.adress;\n      var url = \"mqtt://\" + mqtt_url;\n      var options = {\n        port: User.port,\n        topic: User.topic,\n        clientId: this.clientId,\n        username: User.name,\n        password: User.password\n      };\n      this.options = options; // console.log(\"connecting\");\n\n      this.client = mqtt.connect(url, options); // console.log(\"connected?\");\n\n      this.client.on(\"connect\", function () {\n        // console.log(\"success\");\n        ref.Connecting(true);\n      }).on(\"error\", function () {\n        // console.log(\"error\");\n        ref.Connecting(false);\n      }).on(\"close\", function () {\n        ref.Connecting(false); // console.log(\"closing\");\n      });\n    },\n    Connecting: function Connecting(connected) {\n      this.connected = connected;\n      this.$store.dispatch(\"Connect\", connected); // console.log(this.connected)\n\n      if (connected == false) {\n        this.car = \"red\";\n      } else {\n        this.car = \"blue\";\n        this.Send(\"drive\", this.clientId + \" har anslutits.\");\n      }\n    },\n    Send: function Send(message) {\n      //console.log(message);\n      this.client.publish(this.options.username + \"/\" + this.options.topic, //Exempel         \"joakim.flink@abbindustrigymnasium.se\"+\"/\" + \"drive\",\n      message);\n      this.$store.dispatch(\"addToLogger\", message);\n    }\n  }\n};",{"version":3,"sources":["Buttons.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <v-container>\r\n  <v-card \r\n\r\n    width=\"700\" \r\n    height=\"400\"\r\n    flat color=\"white\"\r\n    class=\"mx-auto\"\r\n    >\r\n  <v-container fluid>\r\n    <v-row>\r\n      <v-col cols=\"12\">\r\n        <v-subheader class=\"pl-0\">Speed</v-subheader>\r\n        <v-slider\r\n          min=\"-50\"\r\n          max=\"50\"\r\n          v-model=\"hastighet\"  \r\n          thumb-label\r\n          step=\"10\"\r\n          @change=\"Send('h' + hastighet)\"                    \r\n        ></v-slider>\r\n      </v-col>\r\n    </v-row>\r\n  </v-container>\r\n  <v-container fluid>\r\n    <v-row>\r\n      <v-col cols=\"12\">\r\n        <v-subheader class=\"pl-0\">Steering</v-subheader>\r\n        <v-slider\r\n          min=\"-90\"\r\n          max=\"90\"\r\n          step=\"30\"\r\n          v-model=\"styrning\"\r\n          thumb-label\r\n          v-on:change=\"Send('s' + styrning)\"\r\n        ></v-slider>\r\n      </v-col>\r\n    </v-row> \r\n  </v-container>\r\n  </v-card>\r\n  </v-container>\r\n</template>\r\n\r\n\r\n<script>\r\n//Bibliotek som ska användas\r\nvar mqtt = require(\"mqtt\");\r\nexport default {\r\n  name: \"Buttons\",\r\n  props: {\r\n    //Data som skickas in i komponenten\r\n  },\r\n  data() {\r\n    //All data som ska finnas i komponenten\r\n    return {\r\n      connected: false,\r\n      car: \"green\",\r\n      clientId: \"notyetAssigned\",\r\n      client: null,\r\n      speed: 600,\r\n      ticklabels: [\"Långsamt\", \"Snabbare\", \"Snabbast\"],\r\n      options: {},\r\n\r\n      //speedvalue: \"slider\",\r\n      //dirvalue: \"slider2\",\r\n    };\r\n  },\r\n  computed: {\r\n    Disconnect() {\r\n      if (this.$store.getters.connected == false) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  },\r\n  watch: {\r\n    //Om du vill logga någonting när det förändras i htmldelen. se exempel nedan\r\n    Disconnect: {\r\n      handler: function(newVal) {\r\n        if (newVal == true) {\r\n          this.connected = false;\r\n          this.client = mqtt.disconnect;\r\n          this.car = \"green\";\r\n        }\r\n      }\r\n    }\r\n  },\r\n   created() {\r\n    //När komponenten är skapad\r\n    this.Connect()\r\n  },\r\n  methods: {\r\n    //Metoder\r\n    Connect() {\r\n      //https://github.com/mqttjs/MQTT.js/blob/master/README.md\r\n      var ref = this;\r\n      if (this.connected == true) {\r\n        return \"\";\r\n      }\r\n      let User = this.$store.getters.GetUser;\r\n      this.clientId =\r\n        \"DriverControll\" +\r\n        Math.random()\r\n          .toString(16)\r\n          .substr(2, 8);\r\n      var mqtt_url = User.adress;\r\n      var url = \"mqtt://\" + mqtt_url;\r\n      var options = {\r\n        port: User.port,\r\n        topic: User.topic,\r\n        clientId: this.clientId,\r\n        username: User.name,\r\n        password: User.password\r\n      };\r\n      this.options = options;\r\n      // console.log(\"connecting\");\r\n      this.client = mqtt.connect(url, options);\r\n      // console.log(\"connected?\");\r\n\r\n      this.client\r\n        .on(\"connect\", function() {\r\n          // console.log(\"success\");\r\n          ref.Connecting(true);\r\n        })\r\n        .on(\"error\", function() {\r\n          // console.log(\"error\");\r\n          ref.Connecting(false);\r\n        })\r\n        .on(\"close\", function() {\r\n          ref.Connecting(false);\r\n          // console.log(\"closing\");\r\n        });\r\n    },\r\n\r\n    Connecting(connected) {\r\n      this.connected = connected;\r\n      this.$store.dispatch(\"Connect\", connected);\r\n      // console.log(this.connected)\r\n      if (connected == false) {\r\n        this.car = \"red\";\r\n      } else {\r\n        this.car = \"blue\";\r\n        this.Send(\"drive\", this.clientId + \" har anslutits.\");\r\n      }\r\n    },\r\n\r\n    Send(message) {\r\n      //console.log(message);\r\n      this.client.publish(\r\n        this.options.username + \"/\" + this.options.topic, //Exempel         \"joakim.flink@abbindustrigymnasium.se\"+\"/\" + \"drive\",\r\n        message\r\n      );\r\n\r\n      this.$store.dispatch(\"addToLogger\", message);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<!-- CSS -->\r\n<style scoped>\r\n.big {\r\n  font-size: 25px;\r\n}\r\n#Cooltext {\r\n  color: black;\r\n  text-decoration: underline;\r\n}\r\n#box {\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n#hide{\r\n display: none;\r\n}\r\n#logger {\r\n  position: fixed;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 300px;\r\n  height: 300px;\r\n  border: black dotted 2px;\r\n\r\n  word-wrap: break-word;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components"}]}